AWSTemplateFormatVersion: 2010-09-09
Description: lecture13_ELB_setting

Parameters: 
  NameBase:
    Description: this is base name.
    Type: String
    Default: lecture13
  StackNameVPC:
    Description: vpc stack name.
    Type: String
    Default: test01
  StackNameEC2:
    Description: ec2 stack name.
    Type: String
    Default: test02
  AZ1:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1a
  AZ2:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1c

Resources: 
# ------------------------------------------------------------#
#  ELBSecurityGroup
# ------------------------------------------------------------#
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${NameBase}-sg-elb
      GroupDescription: !Sub ${NameBase}-sg-elb created 
      VpcId:
        Fn::ImportValue: !Sub ${StackNameVPC}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-sg-elb
# ------------------------------------------------------------#
#  ELB
# ------------------------------------------------------------#
  ELB: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups: 
        - !Ref ELBSecurityGroup
      Subnets: 
        - Fn::ImportValue: !Sub ${StackNameVPC}-PublicSubnet1-${AZ1}-ID
        - Fn::ImportValue: !Sub ${StackNameVPC}-PublicSubnet2-${AZ2}-ID

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${NameBase}-TargetGroup
      VpcId:
        Fn::ImportValue: !Sub ${StackNameVPC}-VPCID
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Port: 80
      TargetType: instance
      Targets: 
        - Id:
            Fn::ImportValue: !Sub ${StackNameEC2}-ec2-ID
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub ${NameBase}-TargetGroup

  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ELB
      Port: 80
      Protocol: HTTP
      DefaultActions: 
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward

Outputs:
  ALBendpoint:
    Value: !GetAtt ELB.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ALBendpoint-DNSName
